<?xml version="1.0"?><!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="Transaction">
  <refmeta>
    <refentrytitle role="top_of_page">org.freedesktop.PackageKit.Transaction</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>org.freedesktop.PackageKit.Transaction</refname>
    <refpurpose>Transaction interface</refpurpose>
  </refnamediv>
  <refsynopsisdiv role="synopsis">
    <title role="synopsis.title">Methods</title>
    <synopsis><link linkend="Transaction.SetHints">SetHints</link>           (in  'as' hints)
<link linkend="Transaction.AcceptEula">AcceptEula</link>         (in  's'  eula_id)
<link linkend="Transaction.Cancel">Cancel</link>             ()
<link linkend="Transaction.DownloadPackages">DownloadPackages</link>   (in  'b'  store_in_cache,
                    in  'as' package_ids)
<link linkend="Transaction.GetCategories">GetCategories</link>      ()
<link linkend="Transaction.DependsOn">DependsOn</link>          (in  't'  filter,
                    in  'as' package_ids,
                    in  'b'  recursive)
<link linkend="Transaction.GetDetails">GetDetails</link>         (in  'as' package_ids)
<link linkend="Transaction.GetDetailsLocal">GetDetailsLocal</link>    (in  'as' files)
<link linkend="Transaction.GetFilesLocal">GetFilesLocal</link>      (in  'as' files)
<link linkend="Transaction.GetFiles">GetFiles</link>           (in  'as' package_ids)
<link linkend="Transaction.GetOldTransactions">GetOldTransactions</link> (in  'u'  number)
<link linkend="Transaction.GetPackages">GetPackages</link>        (in  't'  filter)
<link linkend="Transaction.GetRepoList">GetRepoList</link>        (in  't'  filter)
<link linkend="Transaction.RequiredBy">RequiredBy</link>         (in  't'  filter,
                    in  'as' package_ids,
                    in  'b'  recursive)
<link linkend="Transaction.GetUpdateDetail">GetUpdateDetail</link>    (in  'as' package_ids)
<link linkend="Transaction.GetUpdates">GetUpdates</link>         (in  't'  filter)
<link linkend="Transaction.GetDistroUpgrades">GetDistroUpgrades</link>  ()
<link linkend="Transaction.InstallFiles">InstallFiles</link>       (in  't'  transaction_flags,
                    in  'as' full_paths)
<link linkend="Transaction.InstallPackages">InstallPackages</link>    (in  't'  transaction_flags,
                    in  'as' package_ids)
<link linkend="Transaction.InstallSignature">InstallSignature</link>   (in  'u'  sig_type,
                    in  's'  key_id,
                    in  's'  package_id)
<link linkend="Transaction.RefreshCache">RefreshCache</link>       (in  'b'  force)
<link linkend="Transaction.RemovePackages">RemovePackages</link>     (in  't'  transaction_flags,
                    in  'as' package_ids,
                    in  'b'  allow_deps,
                    in  'b'  autoremove)
<link linkend="Transaction.RepoEnable">RepoEnable</link>         (in  's'  repo_id,
                    in  'b'  enabled)
<link linkend="Transaction.RepoSetData">RepoSetData</link>        (in  's'  repo_id,
                    in  's'  parameter,
                    in  's'  value)
<link linkend="Transaction.RepoRemove">RepoRemove</link>         (in  't'  transaction_flags,
                    in  's'  repo_id,
                    in  'b'  autoremove)
<link linkend="Transaction.Resolve">Resolve</link>            (in  't'  filter,
                    in  'as' packages)
<link linkend="Transaction.SearchDetails">SearchDetails</link>      (in  't'  filter,
                    in  'as' values)
<link linkend="Transaction.SearchFiles">SearchFiles</link>        (in  't'  filter,
                    in  'as' values)
<link linkend="Transaction.SearchGroups">SearchGroups</link>       (in  't'  filter,
                    in  'as' values)
<link linkend="Transaction.SearchNames">SearchNames</link>        (in  't'  filter,
                    in  'as' values)
<link linkend="Transaction.UpdatePackages">UpdatePackages</link>     (in  't'  transaction_flags,
                    in  'as' package_ids)
<link linkend="Transaction.WhatProvides">WhatProvides</link>       (in  't'  filter,
                    in  'as' values)
<link linkend="Transaction.UpgradeSystem">UpgradeSystem</link>      (in  't'  transaction_flags,
                    in  's'  distro_id,
                    in  'u'  upgrade_kind)
<link linkend="Transaction.RepairSystem">RepairSystem</link>       (in  't'  transaction_flags)
</synopsis>
  </refsynopsisdiv>
  <refsect1 role="signal_proto">
    <title role="signal_proto.title">Signals</title>
    <synopsis><link linkend="Transaction::Category">Category</link>              ('s'     parent_id,
                       's'     cat_id,
                       's'     name,
                       's'     summary,
                       's'     icon)
<link linkend="Transaction::Details">Details</link>               ('a{sv}' data)
<link linkend="Transaction::ErrorCode">ErrorCode</link>             ('u'     code,
                       's'     details)
<link linkend="Transaction::Files">Files</link>                 ('s'     package_id,
                       'as'    file_list)
<link linkend="Transaction::Finished">Finished</link>              ('u'     exit,
                       'u'     runtime)
<link linkend="Transaction::Package">Package</link>               ('u'     info,
                       's'     package_id,
                       's'     summary)
<link linkend="Transaction::RepoDetail">RepoDetail</link>            ('s'     repo_id,
                       's'     description,
                       'b'     enabled)
<link linkend="Transaction::RepoSignatureRequired">RepoSignatureRequired</link> ('s'     package_id,
                       's'     repository_name,
                       's'     key_url,
                       's'     key_userid,
                       's'     key_id,
                       's'     key_fingerprint,
                       's'     key_timestamp,
                       'u'     type)
<link linkend="Transaction::EulaRequired">EulaRequired</link>          ('s'     eula_id,
                       's'     package_id,
                       's'     vendor_name,
                       's'     license_agreement)
<link linkend="Transaction::MediaChangeRequired">MediaChangeRequired</link>   ('u'     media_type,
                       's'     media_id,
                       's'     media_text)
<link linkend="Transaction::RequireRestart">RequireRestart</link>        ('u'     type,
                       's'     package_id)
<link linkend="Transaction::Transaction">Transaction</link>           ('o'     object_path,
                       's'     timespec,
                       'b'     succeeded,
                       'u'     role,
                       'u'     duration,
                       's'     data,
                       'u'     uid,
                       's'     cmdline)
<link linkend="Transaction::UpdateDetail">UpdateDetail</link>          ('s'     package_id,
                       'as'    updates,
                       'as'    obsoletes,
                       'as'    vendor_urls,
                       'as'    bugzilla_urls,
                       'as'    cve_urls,
                       'u'     restart,
                       's'     update_text,
                       's'     changelog,
                       'u'     state,
                       's'     issued,
                       's'     updated)
<link linkend="Transaction::DistroUpgrade">DistroUpgrade</link>         ('u'     type,
                       's'     name,
                       's'     summary)
<link linkend="Transaction::ItemProgress">ItemProgress</link>          ('s'     id,
                       'u'     status,
                       'u'     percentage)
<link linkend="Transaction::Destroy">Destroy</link>               ()
</synopsis>
  </refsect1>
  <refsect1 role="impl_interfaces">
    <title role="impl_interfaces.title">Implemented Interfaces</title>
    <para>org.freedesktop.PackageKit.Transaction implements
    org.freedesktop.DBus.Introspectable,
    org.freedesktop.DBus.Properties
    </para>
  </refsect1>
  <refsect1 role="properties">
    <title role="properties.title">Properties</title>
    <synopsis><link linkend="Transaction:Role">'Role'</link>                  read      'u'
<link linkend="Transaction:Status">'Status'</link>                read      'u'
<link linkend="Transaction:LastPackage">'LastPackage'</link>           read      's'
<link linkend="Transaction:Uid">'Uid'</link>                   read      'u'
<link linkend="Transaction:Percentage">'Percentage'</link>            read      'u'
<link linkend="Transaction:AllowCancel">'AllowCancel'</link>           read      'b'
<link linkend="Transaction:CallerActive">'CallerActive'</link>          read      'b'
<link linkend="Transaction:ElapsedTime">'ElapsedTime'</link>           read      'u'
<link linkend="Transaction:RemainingTime">'RemainingTime'</link>         read      'u'
<link linkend="Transaction:Speed">'Speed'</link>                 read      'u'
<link linkend="Transaction:DownloadSizeRemaining">'DownloadSizeRemaining'</link> read      't'
<link linkend="Transaction:TransactionFlags">'TransactionFlags'</link>      read      't'
</synopsis>
  </refsect1>
  <refsect1 role="desc">
    <title role="desc.title">Description</title>
    <para>
      
        <para>
          The transaction interface is used for interacting with individual transactions.
        </para>
      
    </para>
  </refsect1>
  <refsect1 role="details"><title role="details.title">Details</title><refsect2><title><anchor role="function" id="Transaction.SetHints"/>SetHints ()</title><indexterm><primary>SetHints</primary><secondary>Transaction</secondary></indexterm><programlisting>SetHints (in  'as' hints)</programlisting></refsect2>
          <para>
            This method allows the calling session to set transaction hints for
            the package manager which can change as the transaction runs.
          </para>
          <para>
            This method can be sent before the transaction has been run or
            whilst it is running. There is no limit to the number of times this
            method can be sent, although some backends may only use the values
            that were set before the transaction was started.
          </para>
          <para>
            Each parameter value is optional.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>hints</parameter>:</term><listitem><simpara>
            
              The values as an array of strings, for example
              ['locale=en_GB.utf8','idle=true','interactive=false','cache-age=3600'].
            
            
              The following parameter values are understood:
            
            
              
                locale
                
                  The locale code, for example en_GB.
                
              
              
                background
                
                  If the method should be executed as a background task, valid
                  values are true and false,
                  and other values will result in an error.
                  Background tasks are normally treated with a low priority than
                  regular tasks, and normally only use idle CPU and network.
                
              
              
                interactive
                
                  If the method can ask interactive questions whilst running,
                  valid values are true and false,
                  and other values will result in an error.
                
              
              
                cache-age
                
                  This allows the frontend to set how fresh it needs the
                  metadata used in the transaction.
                  This allows fine control of the age of the returned results,
                  but means the frontend probably has to query the updates
                  check value and pass it this value for GetUpdates,
                  and choose something sane otherwise.
                  Most interactive clients will set this to intmaxdoc:tt&gt;
                  which means "never download new metadata, unless required to return results".
                  Most transactions will not have this value set.
                
              
            
            
              Other values will cause a verbose warning in the daemon, but will
              not cause the method to fail. This will preserve forward and
              backwards compatibility for future API versions.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.AcceptEula"/>AcceptEula ()</title><indexterm><primary>AcceptEula</primary><secondary>Transaction</secondary></indexterm><programlisting>AcceptEula (in  's' eula_id)</programlisting></refsect2>
          <para>
            This method allows the user to accept a end user licence agreement.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>eula_id</parameter>:</term><listitem><simpara>
            
              A valid EULA ID
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.accept-eula</para><refsect2><title><anchor role="function" id="Transaction.Cancel"/>Cancel ()</title><indexterm><primary>Cancel</primary><secondary>Transaction</secondary></indexterm><programlisting>Cancel ()</programlisting></refsect2>
          <para>
            This method cancels a transaction that is already running
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction.DownloadPackages"/>DownloadPackages ()</title><indexterm><primary>DownloadPackages</primary><secondary>Transaction</secondary></indexterm><programlisting>DownloadPackages (in  'b'  store_in_cache,
                  in  'as' package_ids)</programlisting></refsect2>
          <para>
            This method downloads packages into a temporary directory.
          </para>
          <para>
            This method should emit one
            Files signal for each package that is downloaded,
            with the file list set as the name of the complete downloaded file
            and directory, so for example:
          </para>
          <para>
            DownloadPackages('hal;0.1.2;i386;fedora','hal-info;2009-09-07;no-arch;updates')
            should send two signals, e.g.
            Files('hal;0.1.2;i386;fedora', '/tmp/hal-0.1.2.i386.rpm')
            and
            Files('hal-info;2009-09-07;no-arch;updates', '/tmp/hal-info-2009-09-07.noarch.rpm').
          </para>
        <variablelist role="params"><varlistentry><term><parameter>store_in_cache</parameter>:</term><listitem><simpara>
            
              If the downloaded files should be stored in the system
              package cache rather than copied into a newly created
              directory.
            
            
              See 
              the developer docs for more details on how
              this is supposed to work.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetCategories"/>GetCategories ()</title><indexterm><primary>GetCategories</primary><secondary>Transaction</secondary></indexterm><programlisting>GetCategories ()</programlisting></refsect2>
          <para>
            This method return the collection categories
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction.DependsOn"/>DependsOn ()</title><indexterm><primary>DependsOn</primary><secondary>Transaction</secondary></indexterm><programlisting>DependsOn (in  't'  filter,
           in  'as' package_ids,
           in  'b'  recursive)</programlisting></refsect2>
          <para>
            This method returns packages that this package depends on.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>recursive</parameter>:</term><listitem><simpara>
            
              Either true or false. If yes then the requirements should be
              returned for all packages returned.
              This means if gnome-power-manager depends on NetworkManager
              and NetworkManager depends on HAL, then DependsOn on
              gnome-power-manager should return both HAL and NetworkManager.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetDetails"/>GetDetails ()</title><indexterm><primary>GetDetails</primary><secondary>Transaction</secondary></indexterm><programlisting>GetDetails (in  'as' package_ids)</programlisting></refsect2>
          <para>
            This method should return all the details about a specific
            package_id.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Details.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetDetailsLocal"/>GetDetailsLocal ()</title><indexterm><primary>GetDetailsLocal</primary><secondary>Transaction</secondary></indexterm><programlisting>GetDetailsLocal (in  'as' files)</programlisting></refsect2>
          <para>
            This method should return all the details about a specific
            local file.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Details.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>files</parameter>:</term><listitem><simpara>
            
              An array of filenames.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetFilesLocal"/>GetFilesLocal ()</title><indexterm><primary>GetFilesLocal</primary><secondary>Transaction</secondary></indexterm><programlisting>GetFilesLocal (in  'as' files)</programlisting></refsect2>
          <para>
            This method should return all the file lists for a specific
            local file.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Details.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>files</parameter>:</term><listitem><simpara>
            
              An array of filenames.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetFiles"/>GetFiles ()</title><indexterm><primary>GetFiles</primary><secondary>Transaction</secondary></indexterm><programlisting>GetFiles (in  'as' package_ids)</programlisting></refsect2>
          <para>
            This method should return the file list of the package_id.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Files.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetOldTransactions"/>GetOldTransactions ()</title><indexterm><primary>GetOldTransactions</primary><secondary>Transaction</secondary></indexterm><programlisting>GetOldTransactions (in  'u' number)</programlisting></refsect2>
          <para>
            This method allows a client to view details for old transactions.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>number</parameter>:</term><listitem><simpara>
            
              The number of past transactions, or 0 for all known transactions.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetPackages"/>GetPackages ()</title><indexterm><primary>GetPackages</primary><secondary>Transaction</secondary></indexterm><programlisting>GetPackages (in  't' filter)</programlisting></refsect2>
          <para>
            This method returns all the packages without a search term.
          </para>
          <para>
            This method typically emits
            Progress,
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetRepoList"/>GetRepoList ()</title><indexterm><primary>GetRepoList</primary><secondary>Transaction</secondary></indexterm><programlisting>GetRepoList (in  't' filter)</programlisting></refsect2>
          <para>
            This method returns the list of repositories used in the system.
          </para>
          <para>
            This method should emit RepoDetail.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.RequiredBy"/>RequiredBy ()</title><indexterm><primary>RequiredBy</primary><secondary>Transaction</secondary></indexterm><programlisting>RequiredBy (in  't'  filter,
            in  'as' package_ids,
            in  'b'  recursive)</programlisting></refsect2>
          <para>
            This method returns packages that depend on this package.
            This is useful to know, as if package_id is being
            removed, we can warn the user what else would be removed.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>recursive</parameter>:</term><listitem><simpara>
            
              Either true or false. If yes then the requirements should be
              returned for all packages returned.
              This means if gnome-power-manager depends on NetworkManager
              and NetworkManager depends on HAL, then GetRequires on
              HAL should return both gnome-power-manager and NetworkManager.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetUpdateDetail"/>GetUpdateDetail ()</title><indexterm><primary>GetUpdateDetail</primary><secondary>Transaction</secondary></indexterm><programlisting>GetUpdateDetail (in  'as' package_ids)</programlisting></refsect2>
          <para>
            This method returns details about a specific update.
          </para>
          <para>
            This method typically emits
            UpdateDetail and
            Error
          </para>
        <variablelist role="params"><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetUpdates"/>GetUpdates ()</title><indexterm><primary>GetUpdates</primary><secondary>Transaction</secondary></indexterm><programlisting>GetUpdates (in  't' filter)</programlisting></refsect2>
          <para>
            This method should return a list of packages that are installed and are upgradable.
            It should only return the newest update for each installed package.
          </para>
          <para>
            This method typically emits
            Progress,
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            blocked,
            low,
            normal,
            important or
            security.
          </para>
          <para>
            The status blocked signifies the package cannot be
            updated, probably due to other dependencies not being met.
            This type allows the GUI tools to show to the user that an update
            exists, but cannot be installed.
            The reason for it not being installed should be put into the update
            description when doing GetUpdateDetail.
          </para>
          <para>
            A filter such as basename or gui
            is also useful if you want to do filtering on the method to only show
            the main packages rather than the complete list.
            The complete list is available but specifying none
            as the filter.
            Using no filter which may be useful in advanced tools or when using
            libpackagekit and searching for an update of a specific name.
            Other filter types may be present, but can be safely ignored of the
            backend does not support them.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.GetDistroUpgrades"/>GetDistroUpgrades ()</title><indexterm><primary>GetDistroUpgrades</primary><secondary>Transaction</secondary></indexterm><programlisting>GetDistroUpgrades ()</programlisting></refsect2>
          <para>
            This method should return a list of distribution upgrades that are
            available.
            It should not return updates, only major upgrades.
          </para>
          <para>
            This method typically emits
            DistroUpgrade,
            Error and
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction.InstallFiles"/>InstallFiles ()</title><indexterm><primary>InstallFiles</primary><secondary>Transaction</secondary></indexterm><programlisting>InstallFiles (in  't'  transaction_flags,
              in  'as' full_paths)</programlisting></refsect2>
          <para>
            This method installs local package files onto the local system.
          </para>
          <para>
            The installer should always install extra dependant packages automatically.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            downloading,
            updating,
            installing or
            removing.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transaction_flags</parameter>:</term><listitem><simpara>
            
              If the transaction is only allowed to install trusted files.
              Unsigned files should not be installed if this parameter is TRUE.
            
            
              If this method is can only install trusted files, and the files are unsigned, then
              the backend will send a ErrorCode(missing-gpg-signature).
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>full_paths</parameter>:</term><listitem><simpara>
            
              An array of full path and filenames to packages.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.localinstall-untrusted</para><refsect2><title><anchor role="function" id="Transaction.InstallPackages"/>InstallPackages ()</title><indexterm><primary>InstallPackages</primary><secondary>Transaction</secondary></indexterm><programlisting>InstallPackages (in  't'  transaction_flags,
                 in  'as' package_ids)</programlisting></refsect2>
          <para>
            This method installs new packages on the local system.
          </para>
          <para>
            The installer should always install extra packages automatically
            as the use could call DependsOn prior to the install if a confirmation
            is required in the UI.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            downloading,
            updating,
            installing or
            removing.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transaction_flags</parameter>:</term><listitem><simpara>
            
              If the transaction is only allowed to install trusted packages.
              Unsigned packages should not be installed if this transaction_flags has ONLY_TRUSTED.
            
            
              If this method is can only install trusted packages, and the packages are unsigned, then
              the backend will send a ErrorCode(missing-gpg-signature).
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.install-untrusted</para><refsect2><title><anchor role="function" id="Transaction.InstallSignature"/>InstallSignature ()</title><indexterm><primary>InstallSignature</primary><secondary>Transaction</secondary></indexterm><programlisting>InstallSignature (in  'u' sig_type,
                  in  's' key_id,
                  in  's' package_id)</programlisting></refsect2>
          <para>
            This method allows us to install new security keys.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>sig_type</parameter>:</term><listitem><simpara>
            
              A key type enum, e.g. gpg
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>key_id</parameter>:</term><listitem><simpara>
            
              A key ID, e.g. BB7576AC
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_id</parameter>:</term><listitem><simpara>
            
              A PackageID for the package that the user is trying to install
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.install-signature</para><refsect2><title><anchor role="function" id="Transaction.RefreshCache"/>RefreshCache ()</title><indexterm><primary>RefreshCache</primary><secondary>Transaction</secondary></indexterm><programlisting>RefreshCache (in  'b' force)</programlisting></refsect2>
          <para>
            This method should fetch updated meta-data for all enabled repositories.
            This operation should be only scheduled when the computer is idle as
            the network connection will be very active, and will the computer will
            have have non-trivial levels of hard disk and processor activity.
            For these reasons, it should not be done automatically when on battery
            power.
          </para>
          <para>
            When fetching each software repository, ensure to emit RepoDetail for the
            current repository to give the user interface some extra details. Be sure to
            have the "enabled" field set to true, otherwise you wouldn't be fetching
            that repository.
          </para>
          <para>
            This method typically emits
            Progress,
            Error and
            RepoDetail.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>force</parameter>:</term><listitem><simpara>
            
              If the caches should be cleaned and reloaded even if there is valid, up to date data.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.refresh-cache</para><refsect2><title><anchor role="function" id="Transaction.RemovePackages"/>RemovePackages ()</title><indexterm><primary>RemovePackages</primary><secondary>Transaction</secondary></indexterm><programlisting>RemovePackages (in  't'  transaction_flags,
                in  'as' package_ids,
                in  'b'  allow_deps,
                in  'b'  autoremove)</programlisting></refsect2>
          <para>
            This method removes packages from the local system.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            downloading,
            updating,
            installing or
            removing.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transaction_flags</parameter>:</term><listitem><simpara>
            
              If the transaction should be simulated or prepared.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>allow_deps</parameter>:</term><listitem><simpara>
            
              Either true or false.
              If true allow other packages to be removed with the package,
              but false should cause the script to abort if other packages
              are dependant on the package.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>autoremove</parameter>:</term><listitem><simpara>
            
              Either true or false.
              This option is only really interesting on embedded devices with a limited amount of
              flash storage.
              It suggests to the packagekit backend that dependencies installed at the same time as
              the package should also be removed if they are not required by anything else.
              For instance, if you install OpenOffice, it might download libneon as a dependency.
              When auto_remove is set to true, and you remove OpenOffice then
              libneon will also get removed automatically.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.remove</para><refsect2><title><anchor role="function" id="Transaction.RepoEnable"/>RepoEnable ()</title><indexterm><primary>RepoEnable</primary><secondary>Transaction</secondary></indexterm><programlisting>RepoEnable (in  's' repo_id,
            in  'b' enabled)</programlisting></refsect2>
          <para>
            This method enables the repository specified.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>repo_id</parameter>:</term><listitem><simpara>
            
              A repository identifier, e.g. fedora-development-debuginfo
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>enabled</parameter>:</term><listitem><simpara>
            
              true if enabled, false if disabled.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.repo-change</para><refsect2><title><anchor role="function" id="Transaction.RepoSetData"/>RepoSetData ()</title><indexterm><primary>RepoSetData</primary><secondary>Transaction</secondary></indexterm><programlisting>RepoSetData (in  's' repo_id,
             in  's' parameter,
             in  's' value)</programlisting></refsect2>
          <para>
            This method allows arbitary data to be passed to the repository handler.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>repo_id</parameter>:</term><listitem><simpara>
            
              A repository identifier, e.g. fedora-development-debuginfo
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>parameter</parameter>:</term><listitem><simpara>
            
              The backend specific value, e.g. set-download-url.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>value</parameter>:</term><listitem><simpara>
            
              The backend specific value, e.g. http://foo.bar.org/baz.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.repo-change</para><refsect2><title><anchor role="function" id="Transaction.RepoRemove"/>RepoRemove ()</title><indexterm><primary>RepoRemove</primary><secondary>Transaction</secondary></indexterm><programlisting>RepoRemove (in  't' transaction_flags,
            in  's' repo_id,
            in  'b' autoremove)</programlisting></refsect2>
          <para>
            This method removes the repo and optionally removes all the packages
            installed from the repo.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transaction_flags</parameter>:</term><listitem><simpara>
            
              If the transaction should be simulated.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>repo_id</parameter>:</term><listitem><simpara>
            
              A repository identifier, e.g. updates-testing
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>autoremove</parameter>:</term><listitem><simpara>
            
              Packages installed from the repo are automatically removed.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need org.freedesktop.packagekit.repo-change</para><refsect2><title><anchor role="function" id="Transaction.Resolve"/>Resolve ()</title><indexterm><primary>Resolve</primary><secondary>Transaction</secondary></indexterm><programlisting>Resolve (in  't'  filter,
         in  'as' packages)</programlisting></refsect2>
          <para>
            This method turns a single package name into a package_id suitable for the
            other methods.
          </para>
          <para>
            If the package is a fully formed package_id, then this should be treated
            as an exact package match. This is useful to find the summary or installed
            status of a package_id returned from other methods.
          </para>
          <para>
            This method typically emits
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>packages</parameter>:</term><listitem><simpara>
            
              An array of package names, e.g. scribus-clipart.
            
            
              The package names are case sensitive, so for instance:
              Resolve('Packagekit') would not match PackageKit.
            
            
              As a special case, if Resolve()doc:tt&gt; is called
              with a name prefixed with @ then
              this should be treated as a category, for example:
              @web-development.
              In this instance, a meta-package should be emitted, for example:
              web-development;;;meta with the correct
              installed status and summary for the category.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.SearchDetails"/>SearchDetails ()</title><indexterm><primary>SearchDetails</primary><secondary>Transaction</secondary></indexterm><programlisting>SearchDetails (in  't'  filter,
               in  'as' values)</programlisting></refsect2>
          <para>
            This method allows deeper searching than SearchName().
          </para>
          <para>
            Do not refresh the package cache. This should be fast.
            This is very similar to search-name.
            This should search as much data as possible, including, if possible
            repo names, package summaries, descriptions, licenses and URLs.
          </para>
          <para>
            Try to emit installed before
            available packages first, as it allows the client
            program to perform the GUI filtering and matching whilst the daemon is
            running the transaction.
          </para>
          <para>
            If the backend includes installed and
            available versions of the same package when searching
            then the available version will have to be filtered
            in the backend.
          </para>
          <para>
            This method typically emits
            Progress,
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>values</parameter>:</term><listitem><simpara>
            
              A single word search term with no wildcard chars. The search can
              contain many words separated by spaces. In this case, the
              search operator is AND and the words can be found
              in any details section/field. For example, search of
              GPL games should returns every games with a GPL
              license.
            
            
              The search should not be treated as case sensitive.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.SearchFiles"/>SearchFiles ()</title><indexterm><primary>SearchFiles</primary><secondary>Transaction</secondary></indexterm><programlisting>SearchFiles (in  't'  filter,
             in  'as' values)</programlisting></refsect2>
          <para>
            This method searches for files on the local system and files in available packages.
          </para>
          <para>
            This should search for files.
            This should allow an application to find out what package owns
            a file on the system.
          </para>
          <para>
            This method typically emits
            Progress,
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>values</parameter>:</term><listitem><simpara>
            
              A filename or fully qualified path and filename on the system.
              If the search term begins with a / it will be assumed the entire path has been given and only packages that contain this exact path and filename will be returned.
              If the search term does not start with / then it should be treated as a single filename, which can be in any directory.
            
            
              The search is case sensitive, and should not be escaped or surrounded in quotes.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.SearchGroups"/>SearchGroups ()</title><indexterm><primary>SearchGroups</primary><secondary>Transaction</secondary></indexterm><programlisting>SearchGroups (in  't'  filter,
              in  'as' values)</programlisting></refsect2>
          <para>
            This method returns packages from a given group enumerated type.
          </para>
          <para>
            Do not refresh the package cache. This should be fast.
          </para>
          <para>
            Try to emit installed before
            available packages first, as it allows the client
            program to perform the GUI filtering and matching whilst the daemon is
            running the transaction.
          </para>
          <para>
            If the backend includes installed and
            available versions of the same package when searching
            then the available version will have to be filtered
            in the backend.
          </para>
          <para>
            This method typically emits
            Progress,
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>values</parameter>:</term><listitem><simpara>
            
              An enumerated group type, or unknown. The search
              cannot contain spaces.
              The following recommendations are made below:
            
            
              If the values strings are prefixed with category: then
              the request is treated as a 'category search', for example:
              category:web-development.
            
            
              If the values strings are prefixed with repo: then
              the request is treated as a 'repository search', for example:
              repo:fedora-debuginfo.
              In this instance all packages that were either installed
              from, or can be installed from the fedora-debuginfo
              repository would be returned.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.SearchNames"/>SearchNames ()</title><indexterm><primary>SearchNames</primary><secondary>Transaction</secondary></indexterm><programlisting>SearchNames (in  't'  filter,
             in  'as' values)</programlisting></refsect2>
          <para>
            This method searches the package database by package name.
          </para>
          <para>
            Do not refresh the package cache. This should be fast.
          </para>
          <para>
            Try to emit installed before
            available packages first, as it allows the client
            program to perform the GUI filtering and matching whilst the daemon is
            running the transaction.
          </para>
          <para>
            If the backend includes installed and
            available versions of the same package when searching
            then the available version will have to be filtered
            in the backend.
          </para>
          <para>
            The search methods should return all results in all repositories.
            This may mean that multiple versions of package are returned.
            If this is not what is wanted by the client program, then the
            newest filter should be used.
          </para>
          <para>
            This method typically emits
            Progress,
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>values</parameter>:</term><listitem><simpara>
            
              A single word search term with no wildcard chars. The search term
              can contain many words separated by spaces. In this case, the
              search operator is AND. For example, search of
              gnome power should returns
              gnome-power-manager but not
              gnomesword or powertop.
            
            
              The search should not be treated as case sensitive.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.UpdatePackages"/>UpdatePackages ()</title><indexterm><primary>UpdatePackages</primary><secondary>Transaction</secondary></indexterm><programlisting>UpdatePackages (in  't'  transaction_flags,
                in  'as' package_ids)</programlisting></refsect2>
          <para>
            This method updates existing packages on the local system.
          </para>
          <para>
            The installer should always update extra packages automatically to fulfil dependencies.
          </para>
          <para>
            This should allow an application to find out what package owns a file on the system.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transaction_flags</parameter>:</term><listitem><simpara>
            
              If the transaction is only allowed to update to trusted packages.
              Unsigned packages should not be installed if this transaction_flags has ONLY_TRUSTED.
            
            
              If this method is can only update trusted packages, and the packages are unsigned, then
              the backend will send a ErrorCode(missing-gpg-signature).
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_ids</parameter>:</term><listitem><simpara>
            
              An array of package IDs.
            
          </simpara></listitem></varlistentry></variablelist><para role="permission">Callers need the org.freedesktop.packagekit.update-package</para><refsect2><title><anchor role="function" id="Transaction.WhatProvides"/>WhatProvides ()</title><indexterm><primary>WhatProvides</primary><secondary>Transaction</secondary></indexterm><programlisting>WhatProvides (in  't'  filter,
              in  'as' values)</programlisting></refsect2>
          <para>
            This method returns packages that provide the supplied attributes.
            This method is useful for finding out what package(s) provide a modalias
            or GStreamer codec string.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
          <para>
            Package enumerated types should be
            available or installed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>filter</parameter>:</term><listitem><simpara>
            
              A correct filter bitfield, e.g. none or installed;~devel
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>values</parameter>:</term><listitem><simpara>
            
              The data to send to the backend to get the packages.
              Note: This is backend specific.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.UpgradeSystem"/>UpgradeSystem ()</title><indexterm><primary>UpgradeSystem</primary><secondary>Transaction</secondary></indexterm><programlisting>UpgradeSystem (in  't' transaction_flags,
               in  's' distro_id,
               in  'u' upgrade_kind)</programlisting></refsect2>
          <para>
            This method perfoms a distribution upgrade to the specified
            version.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transaction_flags</parameter>:</term><listitem><simpara>
            
              If this method is can only install trusted files, and the files are unsigned, then
              the backend will send a ErrorCode(missing-gpg-signature).
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>distro_id</parameter>:</term><listitem><simpara>
            
              The distribution ID to upgrade to, e.g. fedora-14.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>upgrade_kind</parameter>:</term><listitem><simpara>
            
              The type of upgrade, e.g. minimal, default or complete.
              Minimal upgrades will download the smallest amount of data
              before launching a installer.
              The default is to download enough data to launch a full
              graphical installer, but a complete upgrade will be
              required if there is no internet access during install time.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction.RepairSystem"/>RepairSystem ()</title><indexterm><primary>RepairSystem</primary><secondary>Transaction</secondary></indexterm><programlisting>RepairSystem (in  't' transaction_flags)</programlisting></refsect2>
          <para>
            This method recovers the package management system from e.g.
            unsatisfied dependencies of installed packages.
          </para>
          <para>
            This method typically emits
            Progress,
            Status and
            Error and
            Package.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>transaction_flags</parameter>:</term><listitem><simpara>
            
              If the transaction is only allowed to install trusted packages.
              Unsigned packages should not be installed if this transaction_flags has ONLY_TRUSTED.
            
            
              If this method is can only install trusted packages, and the packages are unsigned, then
              the backend will send a ErrorCode(missing-gpg-signature).
            
          </simpara></listitem></varlistentry></variablelist></refsect1>
  <refsect1 role="signals"><title role="signals.title">Signal Details</title><refsect2><title><anchor role="function" id="Transaction::Category"/>The Category signal</title><indexterm><primary>Category</primary><secondary>Transaction</secondary></indexterm><programlisting>Category ('s' parent_id,
          's' cat_id,
          's' name,
          's' summary,
          's' icon)</programlisting></refsect2>
          <para>
            This signal send information about a collection category
          </para>
        <variablelist role="params"><varlistentry><term><parameter>parent_id</parameter>:</term><listitem><simpara>
            
              The parent identifier, e.g. applications.
              If the category is a root entry, use a blank parent.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>cat_id</parameter>:</term><listitem><simpara>
            
              The category identifier, e.g. applications;system-tools.
              The identifier does not have to be related to the parent_id
              in any way.
              A menu tree is made from multiple Category signals.
              The tree does not have any depth or bredth limits, although it should be kept
              to less than about 100 entries as this will be shown to the user in a menu.
            
            
              The cat_id will be sent as a parameter to SearchGroup
              so you may have to prefix or otherwise identify the ID to not confuse the search method.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>name</parameter>:</term><listitem><simpara>
            
              The localised name of the category, e.g. System Tools.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>summary</parameter>:</term><listitem><simpara>
            
              The localised category summary, e.g. Tools for mangaing system state.
              This is not normally shown in the menus, but may be shown in helper popups.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>icon</parameter>:</term><listitem><simpara>
            
              The icon name for the category, e.g. server-cfg.
              If the icon is not known, then it should be set to image-missing.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::Details"/>The Details signal</title><indexterm><primary>Details</primary><secondary>Transaction</secondary></indexterm><programlisting>Details ('a{sv}' data)</programlisting></refsect2>
          <para>
            This signal allows the backend to convey more details about the package.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>data</parameter>:</term><listitem><simpara>
            
              The details about a specific package. The available keys are here:
            
            
              
                package_id
                The package ID [s]
              
              
                license
                The license string, e.g. GPLv2+ [s]
              
              
                group
                The enumerated package group description [u]
              
              
                detail
                The multi-line package description in markdown syntax.[s]
              
              
                url
                The upstream project homepage [s]
              
              
                size
                The size of the package in bytes [t]
              
              
                summary
                The one line package summary, e.g. Clipart for OpenOffice [s]
              
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::ErrorCode"/>The ErrorCode signal</title><indexterm><primary>ErrorCode</primary><secondary>Transaction</secondary></indexterm><programlisting>ErrorCode ('u' code,
           's' details)</programlisting></refsect2>
          <para>
            This signal is used to report errors back to the session program.
          </para>
          <para>
            Errors should only be send on fatal abort.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>code</parameter>:</term><listitem><simpara>
            
              Enumerated type, e.g. no-network.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>details</parameter>:</term><listitem><simpara>
            
              Long description or error, e.g. failed to connect to mytry.xml
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::Files"/>The Files signal</title><indexterm><primary>Files</primary><secondary>Transaction</secondary></indexterm><programlisting>Files ('s'  package_id,
       'as' file_list)</programlisting></refsect2>
          <para>
            This signal is used to push file lists from the backend to the session.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>package_id</parameter>:</term><listitem><simpara>
            
              The Package ID that called the method.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>file_list</parameter>:</term><listitem><simpara>
            
              The file list as an array.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::Finished"/>The Finished signal</title><indexterm><primary>Finished</primary><secondary>Transaction</secondary></indexterm><programlisting>Finished ('u' exit,
          'u' runtime)</programlisting></refsect2>
          <para>
            This signal is used to signal that the transaction has finished.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>exit</parameter>:</term><listitem><simpara>
            
              The PkExitEnum describing the exit status of the transaction.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>runtime</parameter>:</term><listitem><simpara>
            
              The amount of time in milliseconds that the transaction ran for.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::Package"/>The Package signal</title><indexterm><primary>Package</primary><secondary>Transaction</secondary></indexterm><programlisting>Package ('u' info,
         's' package_id,
         's' summary)</programlisting></refsect2>
          <para>
            This signal allows the backend to communicate packages to the session.
          </para>
          <para>
            If updating, as packages are updated then emit them to the screen.
            This allows a summary to be presented after the transaction.
          </para>
          <para>
            When returning results from a search always return
            installed before available for
            the same package name.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>info</parameter>:</term><listitem><simpara>
            
              A valid info enumerated type
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_id</parameter>:</term><listitem><simpara>
            
              This identifier is of the form name;version;arch;data
              in a single string and is meant to represent a single package
              unique across all local and remote data stores.
            
            
              For a remote, not-installed package the data field should
              be set as the repository identifier or repository name.
            
            
              The data field for an installed package must be prefixed
              with installed as this is used to identify
              which packages are installable or installed in the client
              tools.
            
            
              As a special extension, if the package manager is able to
              track which repository a package was originally installed
              from, then the data field can be set to
              installed:REPO-NAME which allows the
              frontend client to advise the user of the package origin.
            
            
              The data field for a non-installed local package must be
              local as this signifies a repository name is
              not available and that package resides locally on the
              client system rather than in any specific repository.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>summary</parameter>:</term><listitem><simpara>
            
              The one line package summary, e.g. Clipart for OpenOffice
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::RepoDetail"/>The RepoDetail signal</title><indexterm><primary>RepoDetail</primary><secondary>Transaction</secondary></indexterm><programlisting>RepoDetail ('s' repo_id,
            's' description,
            'b' enabled)</programlisting></refsect2>
          <para>
            This signal describes a repository on the system.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>repo_id</parameter>:</term><listitem><simpara>
            
              The repository ID.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>description</parameter>:</term><listitem><simpara>
            
              A description of the repository.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>enabled</parameter>:</term><listitem><simpara>
            
              If the repository is enabled and in use.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::RepoSignatureRequired"/>The RepoSignatureRequired signal</title><indexterm><primary>RepoSignatureRequired</primary><secondary>Transaction</secondary></indexterm><programlisting>RepoSignatureRequired ('s' package_id,
                       's' repository_name,
                       's' key_url,
                       's' key_userid,
                       's' key_id,
                       's' key_fingerprint,
                       's' key_timestamp,
                       'u' type)</programlisting></refsect2>
          <para>
            This signal is emitted when a transaction is not possible due to a missing security
            certificate.
          </para>
          <para>
            Some backends support repositories which use a cryptographic
            signature, such as GPG. If a package cannot be installed
            because it is signed with a key that has not been verified,
            this signal is generated so the user can choose to accept or
            decline the key.
          </para>
          <para>
            This signal includes information that can be used to verify
            that the key should be trusted, such as a URL for the company
            or person who owns the key, the key's ID, the userid of
            the key creator, and the date the key was generated.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>package_id</parameter>:</term><listitem><simpara>
            
              A package ID for the package that is trying to be installed
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>repository_name</parameter>:</term><listitem><simpara>
            
              The name of the repository associated with the provided key.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>key_url</parameter>:</term><listitem><simpara>
            
              The URL provided with the key.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>key_userid</parameter>:</term><listitem><simpara>
            
              The user id associated with the key.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>key_id</parameter>:</term><listitem><simpara>
            
              A unique identifier for the key.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>key_fingerprint</parameter>:</term><listitem><simpara>
            
              The hashed fingerprint of the key.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>key_timestamp</parameter>:</term><listitem><simpara>
            
              The date the key was created.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>type</parameter>:</term><listitem><simpara>
            
              The type of signature used. gpg, for example.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::EulaRequired"/>The EulaRequired signal</title><indexterm><primary>EulaRequired</primary><secondary>Transaction</secondary></indexterm><programlisting>EulaRequired ('s' eula_id,
              's' package_id,
              's' vendor_name,
              's' license_agreement)</programlisting></refsect2>
          <para>
            This signal is emitted when a transaction is not possible due to a EULA that needs to
            be agreed to at install time.
          </para>
          <para>
            Some backends support EULAs, which have to be agreed to before the install can proceed.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>eula_id</parameter>:</term><listitem><simpara>
            
              The eula_id which identifies the EULA - this is provided
              so that if a specific EULA has previously agreed to a EULA from Acme Corp it is
              not asked again.
              An example eula_id's is vmware5_single_user.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_id</parameter>:</term><listitem><simpara>
            
              A package ID for the package that is trying to be installed.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>vendor_name</parameter>:</term><listitem><simpara>
            
              The vendor that is providing the EULA.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>license_agreement</parameter>:</term><listitem><simpara>
            
              The full text EULA.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::MediaChangeRequired"/>The MediaChangeRequired signal</title><indexterm><primary>MediaChangeRequired</primary><secondary>Transaction</secondary></indexterm><programlisting>MediaChangeRequired ('u' media_type,
                     's' media_id,
                     's' media_text)</programlisting></refsect2>
          <para>
            This signal is emitted when a transaction needsneeds a different media
            to grab the packages.
          </para>
          <para>
            Some backends support Media changing, which will fail the transaction each time it needs
            a new media.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>media_type</parameter>:</term><listitem><simpara>
            
              Enumerated type, e.g. dvd.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>media_id</parameter>:</term><listitem><simpara>
            
              The media_id which identifies the Media - this is provided
              so that if DeviceKit or another program is able to identify the right media
              before continuing, note however that it's not the DeviceKit oblication to
              check the media when the transaction is re-scheduled this is the backend task.
              An example media_id's is Debian testing amd64 Bin-1.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>media_text</parameter>:</term><listitem><simpara>
            
              Might be used for the disk label too, something like Fedora Disk 1
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::RequireRestart"/>The RequireRestart signal</title><indexterm><primary>RequireRestart</primary><secondary>Transaction</secondary></indexterm><programlisting>RequireRestart ('u' type,
                's' package_id)</programlisting></refsect2>
          <para>
            This signal is sent when the session program should notify the user that a restart is
            required.
          </para>
          <para>
            This is optional, but highly recommended.
          </para>
          <para>
            This can be sent as many times as needed by the backend script.
            PackageKit will always choose the 'worst' method in the UI notification.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>type</parameter>:</term><listitem><simpara>
            
              One of system, application or
              session.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>package_id</parameter>:</term><listitem><simpara>
            
              The package ID that caused the restart notifier.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::Transaction"/>The Transaction signal</title><indexterm><primary>Transaction</primary><secondary>Transaction</secondary></indexterm><programlisting>Transaction ('o' object_path,
             's' timespec,
             'b' succeeded,
             'u' role,
             'u' duration,
             's' data,
             'u' uid,
             's' cmdline)</programlisting></refsect2>
          <para>
            This signal is sent when more details are required about a specific transaction.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>object_path</parameter>:</term><listitem><simpara>
            
              The transaction ID of the old transaction.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>timespec</parameter>:</term><listitem><simpara>
            
              The timespec of the old transaction in ISO8601 format.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>succeeded</parameter>:</term><listitem><simpara>
            
              If the transaction succeeded.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>role</parameter>:</term><listitem><simpara>
            
              The role enumerated type.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>duration</parameter>:</term><listitem><simpara>
            
              The duration of the transaction in milliseconds.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>data</parameter>:</term><listitem><simpara>
            
              Any data associated with the transaction.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>uid</parameter>:</term><listitem><simpara>
            
              The user ID of the user that scheduled the action.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>cmdline</parameter>:</term><listitem><simpara>
            
              The command line of the tool that scheduled the action, e.g.
              /usr/bin/gpk-application.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::UpdateDetail"/>The UpdateDetail signal</title><indexterm><primary>UpdateDetail</primary><secondary>Transaction</secondary></indexterm><programlisting>UpdateDetail ('s'  package_id,
              'as' updates,
              'as' obsoletes,
              'as' vendor_urls,
              'as' bugzilla_urls,
              'as' cve_urls,
              'u'  restart,
              's'  update_text,
              's'  changelog,
              'u'  state,
              's'  issued,
              's'  updated)</programlisting></refsect2>
          <para>
            This signal is sent when more details are required about a specific update.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>package_id</parameter>:</term><listitem><simpara>
            
              The package ID
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>updates</parameter>:</term><listitem><simpara>
            
              A list of package_id's that are to be updated.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>obsoletes</parameter>:</term><listitem><simpara>
            
              A list of package_id's that are to be obsoleted.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>vendor_urls</parameter>:</term><listitem><simpara>
            
              A list of URLs with more details on the update, e.g. a page with more
              information on the update.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>bugzilla_urls</parameter>:</term><listitem><simpara>
            
              A list of bugzilla URL with more details on the update.
              If no URLs are available then this field should be left empty.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>cve_urls</parameter>:</term><listitem><simpara>
            
              A list of CVE URLs with more details on the security advisory.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>restart</parameter>:</term><listitem><simpara>
            
              A valid restart type, e.g. system.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>update_text</parameter>:</term><listitem><simpara>
            
              The update text describing the update.
            
            
              If formatting is required, then markdown syntax should be used,
              e.g. This is **critically** important
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>changelog</parameter>:</term><listitem><simpara>
            
              The ChangeLog text describing the changes since the last version.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>state</parameter>:</term><listitem><simpara>
            
              The state of the update, e.g. stable or
              testing.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>issued</parameter>:</term><listitem><simpara>
            
              The ISO8601 encoded date that the update was issued.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>updated</parameter>:</term><listitem><simpara>
            
              The ISO8601 encoded date that the update was updated.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::DistroUpgrade"/>The DistroUpgrade signal</title><indexterm><primary>DistroUpgrade</primary><secondary>Transaction</secondary></indexterm><programlisting>DistroUpgrade ('u' type,
               's' name,
               's' summary)</programlisting></refsect2>
          <para>
            This signal allows the backend to communicate distribution
            upgrades to the session.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>type</parameter>:</term><listitem><simpara>
            
              A valid upgrade enumerated type, e.g. stable
              or unstable
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>name</parameter>:</term><listitem><simpara>
            
              The short name of the distribution, e.g. Fedora Core 10 RC1
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>summary</parameter>:</term><listitem><simpara>
            
              The multi-line description of the release.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::ItemProgress"/>The ItemProgress signal</title><indexterm><primary>ItemProgress</primary><secondary>Transaction</secondary></indexterm><programlisting>ItemProgress ('s' id,
              'u' status,
              'u' percentage)</programlisting></refsect2>
          <para>
            This signal allows the backend to send infomation about
            package or repository progress when using Simultanous mode.
          </para>
        <variablelist role="params"><varlistentry><term><parameter>id</parameter>:</term><listitem><simpara>
            
              A valid package_id, e.g. hal;0.1.0;i386;fedora
              or a repo_id.
            
            
              A repo_id may only be used when running RefreshCache.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>status</parameter>:</term><listitem><simpara>
            
              The status enumerated value that is being completed.
            
          </simpara></listitem></varlistentry><varlistentry><term><parameter>percentage</parameter>:</term><listitem><simpara>
            
              The percentage of this package action is completed.
            
          </simpara></listitem></varlistentry></variablelist><refsect2><title><anchor role="function" id="Transaction::Destroy"/>The Destroy signal</title><indexterm><primary>Destroy</primary><secondary>Transaction</secondary></indexterm><programlisting>Destroy ()</programlisting></refsect2>
          <para>
            This signal is sent when the transaction has been destroyed and is
            no longer available for use.
          </para>
        <variablelist role="params"/></refsect1>
  <refsect1 role="property_details"><title role="property_details.title">Property Details</title><refsect2><title><anchor role="function" id="Transaction:Role"/>The "Role" property</title><indexterm><primary>Role</primary><secondary>Transaction</secondary></indexterm><programlisting>'Role'  read      'u'
</programlisting></refsect2>
          <para>
            The transaction role enum, e.g. update-system.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:Status"/>The "Status" property</title><indexterm><primary>Status</primary><secondary>Transaction</secondary></indexterm><programlisting>'Status'  read      'u'
</programlisting></refsect2>
          <para>
            The transaction status enum, e.g. downloading.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:LastPackage"/>The "LastPackage" property</title><indexterm><primary>LastPackage</primary><secondary>Transaction</secondary></indexterm><programlisting>'LastPackage'  read      's'
</programlisting></refsect2>
          <para>
            The last package_id that was processed, e.g. hal;0.1.2;i386;fedora.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:Uid"/>The "Uid" property</title><indexterm><primary>Uid</primary><secondary>Transaction</secondary></indexterm><programlisting>'Uid'  read      'u'
</programlisting></refsect2>
          <para>
            The uid of the user that started the transaction.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:Percentage"/>The "Percentage" property</title><indexterm><primary>Percentage</primary><secondary>Transaction</secondary></indexterm><programlisting>'Percentage'  read      'u'
</programlisting></refsect2>
          <para>
            The percentage complete of the transaction.
          </para>
          <para>
            Backends should set this value to 101 if the amount complete cannot be calculated.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:AllowCancel"/>The "AllowCancel" property</title><indexterm><primary>AllowCancel</primary><secondary>Transaction</secondary></indexterm><programlisting>'AllowCancel'  read      'b'
</programlisting></refsect2>
          <para>
            If the transaction can be cancelled.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:CallerActive"/>The "CallerActive" property</title><indexterm><primary>CallerActive</primary><secondary>Transaction</secondary></indexterm><programlisting>'CallerActive'  read      'b'
</programlisting></refsect2>
          <para>
            If the original caller of the method is still connected to the system bus.
            This is usually an indication that the client can handle it's own error handling and
            EULA callbacks rather than another program taking over.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:ElapsedTime"/>The "ElapsedTime" property</title><indexterm><primary>ElapsedTime</primary><secondary>Transaction</secondary></indexterm><programlisting>'ElapsedTime'  read      'u'
</programlisting></refsect2>
          <para>
            The amount of time elapsed during the transaction in seconds.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:RemainingTime"/>The "RemainingTime" property</title><indexterm><primary>RemainingTime</primary><secondary>Transaction</secondary></indexterm><programlisting>'RemainingTime'  read      'u'
</programlisting></refsect2>
          <para>
            The estimated time remaining of the transaction in seconds, or 0 if not known.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:Speed"/>The "Speed" property</title><indexterm><primary>Speed</primary><secondary>Transaction</secondary></indexterm><programlisting>'Speed'  read      'u'
</programlisting></refsect2>
          <para>
            The estimated speed of the transaction (copying, downloading, etc.) in bits per second, or 0 if not known.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:DownloadSizeRemaining"/>The "DownloadSizeRemaining" property</title><indexterm><primary>DownloadSizeRemaining</primary><secondary>Transaction</secondary></indexterm><programlisting>'DownloadSizeRemaining'  read      't'
</programlisting></refsect2>
          <para>
            The number of bytes remaining to download, 0 if nothing is left to download.
          </para>
        <variablelist role="params"/><refsect2><title><anchor role="function" id="Transaction:TransactionFlags"/>The "TransactionFlags" property</title><indexterm><primary>TransactionFlags</primary><secondary>Transaction</secondary></indexterm><programlisting>'TransactionFlags'  read      't'
</programlisting></refsect2>
          <para>
            The flags set for this transaction, e.g. SIMULATE or ONLY_DOWNLOAD.
          </para>
        <variablelist role="params"/></refsect1>
</refentry>
