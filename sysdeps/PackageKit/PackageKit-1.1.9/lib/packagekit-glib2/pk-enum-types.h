
/* This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */

#if !defined (__PACKAGEKIT_H_INSIDE__) && !defined (PK_COMPILATION)
#error "Only <packagekit.h> can be included directly."
#endif

#ifndef __PK_ENUM_TYPES_H__
#define __PK_ENUM_TYPES_H__

#include <glib-object.h>

G_BEGIN_DECLS

/* enumerations from "pk-client.h" */
GType pk_client_error_get_type (void) G_GNUC_CONST;
#define PK_TYPE_CLIENT_ERROR (pk_client_error_get_type ())

/* enumerations from "pk-control.h" */
GType pk_control_error_get_type (void) G_GNUC_CONST;
#define PK_TYPE_CONTROL_ERROR (pk_control_error_get_type ())

/* enumerations from "pk-enum.h" */
GType pk_role_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_ROLE_ENUM (pk_role_enum_get_type ())
GType pk_status_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_STATUS_ENUM (pk_status_enum_get_type ())
GType pk_exit_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_EXIT_ENUM (pk_exit_enum_get_type ())
GType pk_network_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_NETWORK_ENUM (pk_network_enum_get_type ())
GType pk_filter_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_FILTER_ENUM (pk_filter_enum_get_type ())
GType pk_restart_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_RESTART_ENUM (pk_restart_enum_get_type ())
GType pk_error_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_ERROR_ENUM (pk_error_enum_get_type ())
GType pk_group_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_GROUP_ENUM (pk_group_enum_get_type ())
GType pk_update_state_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_UPDATE_STATE_ENUM (pk_update_state_enum_get_type ())
GType pk_info_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_INFO_ENUM (pk_info_enum_get_type ())
GType pk_distro_upgrade_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_DISTRO_UPGRADE_ENUM (pk_distro_upgrade_enum_get_type ())
GType pk_sig_type_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_SIG_TYPE_ENUM (pk_sig_type_enum_get_type ())
GType pk_media_type_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_MEDIA_TYPE_ENUM (pk_media_type_enum_get_type ())
GType pk_authorize_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_AUTHORIZE_ENUM (pk_authorize_enum_get_type ())
GType pk_upgrade_kind_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_UPGRADE_KIND_ENUM (pk_upgrade_kind_enum_get_type ())
GType pk_transaction_flag_enum_get_type (void) G_GNUC_CONST;
#define PK_TYPE_TRANSACTION_FLAG_ENUM (pk_transaction_flag_enum_get_type ())

/* enumerations from "pk-offline.h" */
GType pk_offline_action_get_type (void) G_GNUC_CONST;
#define PK_TYPE_OFFLINE_ACTION (pk_offline_action_get_type ())
GType pk_offline_error_get_type (void) G_GNUC_CONST;
#define PK_TYPE_OFFLINE_ERROR (pk_offline_error_get_type ())

/* enumerations from "pk-package-sack.h" */
GType pk_package_sack_sort_type_get_type (void) G_GNUC_CONST;
#define PK_TYPE_PACKAGE_SACK_SORT_TYPE (pk_package_sack_sort_type_get_type ())

/* enumerations from "pk-progress.h" */
GType pk_progress_type_get_type (void) G_GNUC_CONST;
#define PK_TYPE_PROGRESS_TYPE (pk_progress_type_get_type ())
G_END_DECLS

#endif /* __PK_ENUM_TYPES_H__ */

/* Generated data ends here */

